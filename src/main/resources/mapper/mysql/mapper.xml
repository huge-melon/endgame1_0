<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shixin.endgame.dao.mysql.MysqlMapper">


    <!--Oracle 获取所有表-->
    <select id="getTableName" resultType="java.util.Map">
       SELECT table_name from information_schema.tables where table_schema= #{db_name}
    </select>

    <!--如何指定数据库，不需要考虑指定数据库，到sql语句这一层时已经找到了数据库-->

    <select id="getTableData" resultType="java.util.Map">
        select * from ${table_name}
    </select>

    <!--从指定数据库、指定的表中选择数据-->
    <!--
    column_name 列名
    data_type 数据类型
    COLUMN_TYPE 列的更底层的数据类型
    COLUMN_KEY 主键

    -->
    <!--SELECT column_name from information_schema.columns where table_schema='usertest' and table_name='user';-->

    <!--获取表中的元数据-->
    <select id="getTableMetaData" resultType="java.util.Map">
        select COLUMN_NAME,COLUMN_TYPE,COLUMN_KEY,IS_NULLABLE,COLUMN_COMMENT from information_schema.COLUMNS where TABLE_SCHEMA= #{db_name} and TABLE_NAME= #{table_name}
    </select>
    
    <!--删除表中重复数据,如果表没有主键该怎么办-->
    <delete id="delDuplicatedData">
        DELETE FROM ${table_name} WHERE ( ${columns_name} ) IN (
	        SELECT ${columns_name} FROM
		        ( SELECT ${columns_name} FROM ${table_name} GROUP BY ${columns_name} HAVING count( ${pri_name} ) > 1 ) AS tmp1 )
	            AND ${table_id} NOT IN ( SELECT ${table_id} FROM
	                ( SELECT min( ${table_id} ) ${table_id} FROM ${table_name} GROUP BY ${columns_name} HAVING count( ${pri_name} ) > 1 ) AS tmp2)
    </delete>

    <!--与条件删除表项为空的行and方法-->
    <delete id="delDataByNullAnd">
        delete from ${table_name} where
        <foreach collection="columns_name" item="columns" separator=" is NULL and ">
            ${columns}
        </foreach>
       is null
    </delete>
    <!--与条件删除表项为空的行or方法-->
    <delete id="delDataByNullOr">
        delete from ${table_name} where
        <foreach collection="columns_name" item="columns" separator=" is NULL or ">
            ${columns}
        </foreach>
        is null
    </delete>
    <!--删除一列-->
    <update id="deleteTableColumn">
        ALTER TABLE ${table_name}
        DROP COLUMN ${columns_name}
    </update>
    <!--按条件删除行-->
    <delete id="deleteByCondition">
        delete from ${table_name} where
        <foreach collection="conditionList" item="condition" separator=" and ">
            ${condition}
        </foreach>
    </delete>

    <!--修改字段类型-->
    <update id="updateColumnType">
        ALTER TABLE ${table_name} MODIFY COLUMN ${column_name}  ${column_type}
    </update>

    <!--获取一列数据-->
    <select id="getColumnData" resultType="java.util.Map">
        select ${pri_key},${column_name} from ${table_name}
    </select>
    <!--剪切字符串-->
    <update id="setColumnData">
        update ${table_name} set ${column_name} = #{column_value} where ${pri_key} = #{pri_value}
    </update>

    <!--获得平均值-->
    <select id="getAverage" resultType="java.lang.Double">
        select AVG(${column_name}) from ${table_name}
    </select>
    <!--获得众数-->
    <select id="getMode" resultType="java.util.Map">
        select ${column_name},count(*) cnt
        from ${table_name}
        group by score
        having count(*) >= (
        select max(cnt) from (select count(*) cnt from ${table_name} group by ${column_name}) tmp
        )
    </select>

    <select id="getColumnDouble" resultType="java.lang.Double">
        select ${column_name} from ${table_name}
    </select>

    <!--获得中位数-->
    <select id="getMedian" resultType="java.lang.Double">
        select AVG(DISTINCT ${column_name} )
        from (
        select T1.${column_name} from ${table_name} T1,${table_name} T2
        group by T1.${column_name}
        having sum(case when T2.${column_name} >= T1.${column_name} then 1 else 0 end) >= count(*)/2
        and sum(case when T2.${column_name} &lt;= T1.${column_name} then 1 else 0 end) >= count(*)/2
        ) tmp

    </select>
    <!--补全-->
    <update id="completFiled">
        update ${table_name} set ${column_name} = #{column_value} where ${column_name} is NULL or ${column_name} = ""
    </update>

    <!--获得指定列的数据-->
    <select id="getUserDefineData" resultType="java.util.Map">
        select ${column_name} from ${table_name}
    </select>

    <insert id="insertData">
        insert into ${table_name}(${column_name}) values(${column_value})
    </insert>
</mapper>